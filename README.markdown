# Order Matching System

## Overview
This is a Go-based order matching system developed for an assignment. It supports creating, matching, and canceling limit and market orders for a symbol (e.g., AAPL) via a RESTful API, with a MySQL backend. This README provides simple setup instructions, highlights additional features, and summarizes the work.

## Simplified Setup Instructions

### Prerequisites
- **Go**: Version 1.22 or higher.
- **MySQL**: Server with `mysql-client` installed.
- **Python 3**: For running the structure generator (optional).

### One-Step Setup
1. **Run the Setup Script**:
   - Ensure MySQL is running and accessible.
   - Use the provided command to set up the project:
     ```bash
     ./scripts/setup_project.sh
     ```
   - This script:
     - Creates the `order_matching` database and tables using `schema.sql`.
     - Sets up the `kushagra` user (configured in `.env`).
     - Installs Go dependencies and starts the server.
   - The script reads the MySQL password from `.env`.

2. **Start the Application**:
   - After setup, the server starts automatically on the port specified in `.env` (default: 8080).

3. **Test the API**:
   - Use a tool like `curl` or Postman:
     - Create an order: `curl -X POST -H "Content-Type: application/json" -d '{"symbol":"AAPL","side":"sell","type":"limit","price":100.00,"quantity":5}' http://localhost:8080/orders`
     - Get order book: `curl http://localhost:8080/orderbook?symbol=AAPL&full=true`

### Notes
- The `.env` file contains the database connection string and port. Update `MYSQL_PASSWORD` with a secure password.
- If the setup script fails, manually run `mysql -u kushagra -p < scripts/schema.sql` and adjust `.env`.

## Additional Features Beyond the Assignment
- **Order Book Endpoint**: Added `GET /orderbook` to view current bids and asks.
- **Transaction Safety**: Uses database transactions for atomic operations.
- **Modular Structure**: Organized code into `api/`, `db/`, `models/`, and `utils/` for better maintainability.
- **Automated Setup**: Included `setup_project.sh` to simplify initialization.

## Assumptions Made
- **Time Zone**: Timestamps are in IST (UTC+5:30).
- **Price Precision**: Prices use 8 decimal places for high precision.
- **Single Symbol**: Focuses on AAPL per request.
- **Default Credentials**: Uses `kushagra` user and password from `.env`.
- **Error Handling**: Basic errors are handled, assuming further testing by the recruiter.

## Summary of Work Done
- **Core Functionality**:
  - Implemented `POST /orders`, `DELETE /orders/{id}`, and `GET /orderbook` endpoints.
  - Developed order matching logic in `api/api_handler.go`.
  - Integrated MySQL with `db/` package for persistence.
- **Test Cases Completed**:
  - Case 1: Order creation.
  - Case 2: Market order matching.
  - Case 3: Limit order cancellation.
  - Case 4: Partial matching with market orders.
  - Case 5: Partial matching with limit orders.
  - Case 6: Order cancellation.
- **Challenges Addressed**:
  - Fixed matching logic for market and limit orders.
  - Ensured robust database transactions.

## Project Structure
Refer to the `project_structure.md` file (generated by `generate_struct.py`) for a detailed breakdown of the directory and file organization.

## Current Limitation
The system assumes a single-threaded Go process (e.g., one main.go instance). If you scale to multiple instances (e.g., with a load balancer), race conditions could arise because the in-memory OrderBook isnâ€™t shared or locked across instances.
